// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7n2qQ7qWbaSoTf29w3fMdw
// Component: cCwkE_yl5lBB
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: pvEDofsnRpb1/component
import ListItem from "../../ListItem"; // plasmic-import: TNcsFv7azbn4/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 7JAIBK6bs3Uw/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_landing_page_starter.module.css"; // plasmic-import: 7n2qQ7qWbaSoTf29w3fMdw/projectcss
import * as sty from "./PlasmicValuesSection2Dark.module.css"; // plasmic-import: cCwkE_yl5lBB/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 2UUbeI57eEFB/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: a3S8_12MIoVU/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: obXil6sG5_gv/icon

export type PlasmicValuesSection2Dark__VariantMembers = {};

export type PlasmicValuesSection2Dark__VariantsArgs = {};
type VariantPropType = keyof PlasmicValuesSection2Dark__VariantsArgs;
export const PlasmicValuesSection2Dark__VariantProps =
  new Array<VariantPropType>();

export type PlasmicValuesSection2Dark__ArgsType = {
  foreground?: React.ReactNode;
};

type ArgPropType = keyof PlasmicValuesSection2Dark__ArgsType;
export const PlasmicValuesSection2Dark__ArgProps = new Array<ArgPropType>(
  "foreground"
);

export type PlasmicValuesSection2Dark__OverridesType = {
  root?: p.Flex<"section">;
  foreground?: p.Flex<"div">;
};

export interface DefaultValuesSection2DarkProps {
  foreground?: React.ReactNode;
  className?: string;
}

function PlasmicValuesSection2Dark__RenderFunc(props: {
  variants: PlasmicValuesSection2Dark__VariantsArgs;
  args: PlasmicValuesSection2Dark__ArgsType;
  overrides: PlasmicValuesSection2Dark__OverridesType;
  dataFetches?: PlasmicValuesSection2Dark__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"section"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"foreground"}
        data-plasmic-override={overrides.foreground}
        hasGap={true}
        className={classNames(defaultcss.all, sty.foreground)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__uva3J)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__dl6HT
                  )}
                >
                  {"Freedoms"}
                </div>

                <h2
                  className={classNames(
                    defaultcss.h2,
                    defaultcss.__wab_text,
                    sty.h2___4SP3M
                  )}
                >
                  {"Open by design"}
                </h2>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__h4MAz
                  )}
                >
                  {
                    "Vitae sed sem a justo mauris potenti a primis vivamus justo tempor viverra adipiscing convallis fusce odio condimentum mi parturient ultricies."
                  }
                </div>

                <Button
                  children2={
                    <Icon17Icon
                      className={classNames(defaultcss.all, sty.svg__wZumu)}
                      role={"img"}
                    />
                  }
                  className={classNames("__wab_instance", sty.button___9HkOc)}
                  endIcon={"endIcon" as const}
                  flat={"flat" as const}
                  linkLabel={"linkLabel" as const}
                  noGap={"noGap" as const}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__dgQwA
                      )}
                    >
                      {"Learn more"}
                    </div>
                  }
                />
              </p.Stack>

              <div className={classNames(defaultcss.all, sty.freeBox__vqKhb)}>
                <ListItem
                  bottomBorder={"dark" as const}
                  className={classNames("__wab_instance", sty.listItem___6UmSy)}
                  slot={
                    <Icon16Icon
                      className={classNames(defaultcss.all, sty.svg__mjuac)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__qp4W
                    )}
                  >
                    {"Built on capability"}
                  </div>
                </ListItem>

                <ListItem
                  bottomBorder={"dark" as const}
                  className={classNames("__wab_instance", sty.listItem__agMzr)}
                  slot={
                    <Icon16Icon
                      className={classNames(defaultcss.all, sty.svg__huIe)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__tpIvf
                    )}
                  >
                    {"Highly energetic"}
                  </div>
                </ListItem>

                <ListItem
                  bottomBorder={"dark" as const}
                  className={classNames("__wab_instance", sty.listItem__zITmD)}
                  slot={
                    <Icon16Icon
                      className={classNames(defaultcss.all, sty.svg__l5F)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__cmqCu
                    )}
                  >
                    {"100% transparency and accountability"}
                  </div>
                </ListItem>

                <ListItem
                  bottomBorder={"dark" as const}
                  className={classNames("__wab_instance", sty.listItem__vkCbO)}
                  slot={
                    <Icon16Icon
                      className={classNames(defaultcss.all, sty.svg__gEoBj)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__du35E
                    )}
                  >
                    {"Refreshing clarity"}
                  </div>
                </ListItem>

                <ListItem
                  className={classNames("__wab_instance", sty.listItem__vb0Dy)}
                  slot={
                    <Icon16Icon
                      className={classNames(defaultcss.all, sty.svg___4Ggm)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__bgjLj
                    )}
                  >
                    {"Modern results"}
                  </div>
                </ListItem>
              </div>
            </React.Fragment>
          ),
          value: args.foreground
        })}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "foreground"],
  foreground: ["foreground"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "section";
  foreground: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicValuesSection2Dark__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicValuesSection2Dark__VariantsArgs;
    args?: PlasmicValuesSection2Dark__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicValuesSection2Dark__Fetches;
  } & Omit<PlasmicValuesSection2Dark__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicValuesSection2Dark__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicValuesSection2Dark__ArgProps,
      internalVariantPropNames: PlasmicValuesSection2Dark__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicValuesSection2Dark__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicValuesSection2Dark";
  } else {
    func.displayName = `PlasmicValuesSection2Dark.${nodeName}`;
  }
  return func;
}

export const PlasmicValuesSection2Dark = Object.assign(
  // Top-level PlasmicValuesSection2Dark renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    foreground: makeNodeComponent("foreground"),

    // Metadata about props expected for PlasmicValuesSection2Dark
    internalVariantProps: PlasmicValuesSection2Dark__VariantProps,
    internalArgProps: PlasmicValuesSection2Dark__ArgProps
  }
);

export default PlasmicValuesSection2Dark;
/* prettier-ignore-end */
